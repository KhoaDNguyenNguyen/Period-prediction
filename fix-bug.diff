 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/authRoutes.js b/authRoutes.js
index 65f54de27167c9e8b25fb8f9c0a495e4bca35e2a..c61f05492270baa5dcfe1e3ac8b35015495041fd 100644
--- a/authRoutes.js
+++ b/authRoutes.js
@@ -1,49 +1,49 @@
 // authRoutes.js
 import express from 'express';
 import passport from 'passport';
 import jwt from 'jsonwebtoken';
 
 const router = express.Router();
 
 // Hàm tạo JWT khi xác thực OAuth thành công
 const issueJWT = (user, res) => {
   const payload = {
     oauthId: user.id,
     name: user.displayName,
     provider: user.provider
   };
   const token = jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: '1h' });
 
-  // Redirect về frontend kèm token (bạn có thể đổi URL nếu cần)
-  res.redirect(`http://localhost:5500/index.html?token=${token}`);
+  // Redirect về trang khảo sát kèm token
+  res.redirect(`/survey.html?token=${token}`);
 };
 
 // ===== GOOGLE =====
 router.get('/google', passport.authenticate('google', { scope: ['profile', 'email'] }));
 router.get('/google/callback',
-  passport.authenticate('google', { session: false, failureRedirect: '/SignUp_LogIn_Form.html' }),
+  passport.authenticate('google', { session: false, failureRedirect: '/index.html' }),
   (req, res) => issueJWT(req.user, res)
 );
 
 // ===== FACEBOOK =====
 router.get('/facebook', passport.authenticate('facebook', { scope: ['email'] }));
 router.get('/facebook/callback',
-  passport.authenticate('facebook', { session: false, failureRedirect: '/SignUp_LogIn_Form.html' }),
+  passport.authenticate('facebook', { session: false, failureRedirect: '/index.html' }),
   (req, res) => issueJWT(req.user, res)
 );
 
 // ===== GITHUB =====
 router.get('/github', passport.authenticate('github', { scope: ['user:email'] }));
 router.get('/github/callback',
-  passport.authenticate('github', { session: false, failureRedirect: '/SignUp_LogIn_Form.html' }),
+  passport.authenticate('github', { session: false, failureRedirect: '/index.html' }),
   (req, res) => issueJWT(req.user, res)
 );
 
 // ===== LINKEDIN =====
 router.get('/linkedin', passport.authenticate('linkedin', { scope: ['r_liteprofile', 'r_emailaddress'] }));
 router.get('/linkedin/callback',
-  passport.authenticate('linkedin', { session: false, failureRedirect: '/SignUp_LogIn_Form.html' }),
+  passport.authenticate('linkedin', { session: false, failureRedirect: '/index.html' }),
   (req, res) => issueJWT(req.user, res)
 );
 
 export default router;
diff --git a/public/SignUp_LogIn_Form.js b/public/SignUp_LogIn_Form.js
index 4286591ca9fa46d7eee4a62ca22f4c8f359b780c..1c2a4328d351fb2fc694361878882e10a4f57992 100644
--- a/public/SignUp_LogIn_Form.js
+++ b/public/SignUp_LogIn_Form.js
@@ -49,34 +49,34 @@ document.addEventListener('DOMContentLoaded', () => {
         regMsgEl.style.color = 'green';
         regMsgEl.textContent = 'Đăng ký thành công! Vui lòng đăng nhập.';
       } catch (err) {
         regMsgEl.style.color = 'red';
         regMsgEl.textContent = err.message;
       }
     });
   }
 
   // 5) Login
   const loginForm  = document.getElementById('loginForm');
   const loginMsgEl = document.getElementById('loginMessage');
   if (loginForm && loginMsgEl) {
     loginForm.addEventListener('submit', async e => {
       e.preventDefault();
       const email    = document.getElementById('loginEmail').value.trim();
       const password = document.getElementById('loginPassword').value;
       try {
         const res = await fetch(`${API}/login`, {
           method: 'POST',
           headers: { 'Content-Type': 'application/json' },
           body: JSON.stringify({ email, password })
         });
         const data = await res.json();
         if (!res.ok || !data.token) throw new Error(data.error || 'Đăng nhập thất bại');
-        localStorage.setItem('jwt', data.token);
-        window.location.href = 'index.html';
+        localStorage.setItem('jwt', data.token);
+        window.location.href = 'survey.html';
       } catch (err) {
         loginMsgEl.style.color = 'red';
         loginMsgEl.textContent = err.message;
       }
     });
   }
 });
diff --git a/public/SignUp_LogIn_Form.html b/public/index.html
similarity index 100%
rename from public/SignUp_LogIn_Form.html
rename to public/index.html
diff --git a/public/index.js b/public/index.js
index 0e5e683b88ae59e41f811486847a74d7b5b6bdd8..c1ecc08bbb64ea34545c172252b18097029ab280 100644
--- a/public/index.js
+++ b/public/index.js
@@ -1,43 +1,43 @@
 // 1. Khai báo API endpoint
 // const API = 'http://localhost:3000/api';
 const API = '/api';
 
 
 // 1. Lấy token từ URL nếu vừa đăng nhập OAuth
 const urlParams = new URLSearchParams(window.location.search);
 const tokenFromOAuth = urlParams.get('token');
 if (tokenFromOAuth) {
   localStorage.setItem('jwt', tokenFromOAuth);
-  window.history.replaceState({}, document.title, "index.html");
+  window.history.replaceState({}, document.title, "survey.html");
 }
 
 // 2. Kiểm tra JWT token trong localStorage
 const token = localStorage.getItem('jwt');
 if (!token) {
   alert('Bạn chưa đăng nhập! Chuyển đến trang đăng nhập.');
-  window.location.href = 'SignUp_LogIn_Form.html';
+  window.location.href = 'index.html';
   throw new Error('No JWT token, redirecting to login');
 }
 
 const surveyJson = {
   title: "Khảo sát sức khỏe nhằm dự đoán chu kỳ kinh nguyệt",
   showProgressBar: "top",
   firstPageIsStarted: true,
   startSurveyText: "Bắt đầu",
   pageNextText: "Tiếp",
   completeText: "Gửi",
   completedHtml: "<h3>Xin cảm ơn bạn đã hoàn thành khảo sát!</h3>",
   pages: [
     /* ---------- 1. Thông tin cá nhân ---------- */
     {
       title: "Thông tin cơ bản",
       elements: [
         { type: "text", name: "age", title: "01. Tuổi hiện tại của bạn?", inputType: "number", isRequired: true},
         { type: "text", name: "height_cm", title: "02. Chiều cao của bạn (cm)?", inputType: "number", isRequired: true},
         { type: "text", name: "weight_kg", title: "03. Cân nặng của bạn (kg)?", inputType: "number", isRequired: true},
         { type: "text", name: "menarche_age", title: "04. Tuổi có kinh lần đầu (menarche)?", inputType: "number", isRequired: true},
         { type: "text", name: "parity", title: "05. Bạn đã sinh con chưa? (nếu có, nhập số lần; nếu chưa, nhập 0)", inputType: "number", isRequired: true}
       ]
     },
 
     /* ---------- 2. Dữ liệu chu kỳ ---------- */
diff --git a/server.js b/server.js
index 257a868b54e89eae39f57dae7eb9b68975d662fb..5c0680dc3ed14214441ce988094fc0125d391d38 100644
--- a/server.js
+++ b/server.js
@@ -24,51 +24,51 @@ const __dirname  = path.dirname(__filename);
 
 
 // 1) .env
 // dotenv.config();
 if (!process.env.DATABASE_URL) throw new Error('Missing DATABASE_URL');
 if (!process.env.JWT_SECRET)    throw new Error('Missing JWT_SECRET');
 
 // 2) Neon SQL client
 const sql = neon(process.env.DATABASE_URL);
 
 // 3) App setup
 const app = express();
 app.use(express.json({ limit: '1mb' }));
 app.use(helmet());
 app.use(rateLimit({ windowMs: 15 * 60 * 1000, max: 100 }));
 
 // Sau khi app = express();
 app.use(express.static(path.join(__dirname, 'public')));
 
 
 // Serve static files
 app.use(express.static(path.join(__dirname, 'public')));
 
 // Khi truy cập root, redirect về login form
 app.get('/', (req, res) => {
-  res.redirect('/SignUp_LogIn_Form.html');
+  res.redirect('/index.html');
 });
 
 
 
 // 4) CORS
 const allowedOrigins = [
   'http://127.0.0.1:5500',
   'http://localhost:5500'
 ];
 app.use(cors({ origin: allowedOrigins }));
 app.use(passport.initialize());
 
 import authRoutes from './authRoutes.js';
 app.use('/auth', authRoutes);
 // 5) Health check
 app.get('/api/health', (req, res) => res.json({ status: 'ok' }));
 
 // 6) Register
 app.post('/api/register', async (req, res) => {
   const { username, email, password } = req.body;
   if (!username || !email || !password) {
     return res.status(400).json({ error: 'Thiếu thông tin bắt buộc' });
   }
   try {
     const hash = await bcrypt.hash(password, 12);
 
EOF
)